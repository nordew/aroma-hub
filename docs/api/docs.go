// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/login": {
            "post": {
                "description": "Admin login with OTP code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin login response",
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.AdminLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "description": "Get a list of products with optional filtering (invisible included)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "categoryName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Brand name",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum price",
                        "name": "priceFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum price",
                        "name": "priceTo",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum stock amount",
                        "name": "stockAmountFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum stock amount",
                        "name": "stockAmountTo",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aroma-hub_internal_models.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/admin/refresh": {
            "get": {
                "description": "Refresh admin access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin refresh token",
                "parameters": [
                    {
                        "description": "Admin refresh token information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.AdminRefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin refresh token response",
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.AdminRefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Get a list of categories with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "List categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aroma-hub_internal_models.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Create category",
                "parameters": [
                    {
                        "description": "Category information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.CreateCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created category",
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.CreateCategoryRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "409": {
                        "description": "Category already exists",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "delete": {
                "description": "Delete a category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Delete category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Get a list of orders with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment method (IBAN, сash_on_delivery)",
                        "name": "paymentMethod",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Contact type (telegram, phone)",
                        "name": "contactType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order status (pending, processing, completed, cancelled)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date for filtering (format: YYYY-MM-DD)",
                        "name": "fromDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for filtering (format: YYYY-MM-DD)",
                        "name": "toDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "No orders found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create order",
                "parameters": [
                    {
                        "description": "Order information",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "put": {
                "description": "Update an existing order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order information",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.UpdateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}/cancel": {
            "put": {
                "description": "Cancel an order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Get a list of products with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "List products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "categoryName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Brand name",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum price",
                        "name": "priceFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum price",
                        "name": "priceTo",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum stock amount",
                        "name": "stockAmountFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum stock amount",
                        "name": "stockAmountTo",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aroma-hub_internal_models.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new product to the inventory",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create product",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Product image file",
                        "name": "image",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Product information in JSON format",
                        "name": "data",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/products/best-sellers": {
            "get": {
                "description": "Get a list of best-selling products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get best sellers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of best-selling products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aroma-hub_internal_models.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/products/brands": {
            "get": {
                "description": "Get a list of product brands",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "List brands",
                "responses": {
                    "200": {
                        "description": "List of brands",
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.BrandResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "delete": {
                "description": "Remove a product from the inventory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a product in the inventory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product information",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/set-image": {
            "patch": {
                "description": "Set the image of a product in the inventory",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Set product image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Product image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/promocodes": {
            "get": {
                "description": "Get a list of promocodes with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promocodes"
                ],
                "summary": "List promocodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Promocode ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Promocode code",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum discount percentage",
                        "name": "discountFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum discount percentage",
                        "name": "discountTo",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter for active promocodes (not expired)",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of promocodes",
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.ListPromocodesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "No promocodes found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new promocode with discount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promocodes"
                ],
                "summary": "Create promocode",
                "parameters": [
                    {
                        "description": "Promocode information",
                        "name": "promocode",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aroma-hub_internal_application_dto.CreatePromocodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created successfully"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "409": {
                        "description": "Promocode already exists",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        },
        "/promocodes/{id}": {
            "delete": {
                "description": "Delete a promocode by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "promocodes"
                ],
                "summary": "Delete promocode",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Promocode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "404": {
                        "description": "Promocode not found",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errx.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "aroma-hub_internal_application_dto.AdminLoginRequest": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.AdminLoginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.AdminRefreshTokenRequest": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.AdminRefreshTokenResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.BrandResponse": {
            "type": "object",
            "properties": {
                "brands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "aroma-hub_internal_application_dto.CreateCategoryRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.CreateOrderRequest": {
            "type": "object",
            "required": [
                "address",
                "contactType",
                "fullName",
                "paymentMethod",
                "phoneNumber",
                "productItems"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "contactType": {
                    "enum": [
                        "telegram",
                        "phone"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/aroma-hub_internal_models.ContactType"
                        }
                    ]
                },
                "fullName": {
                    "type": "string"
                },
                "paymentMethod": {
                    "enum": [
                        "IBAN",
                        "сash_on_delivery"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/aroma-hub_internal_models.PaymentMethod"
                        }
                    ]
                },
                "phoneNumber": {
                    "type": "string"
                },
                "productItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aroma-hub_internal_application_dto.ProductOrder"
                    }
                },
                "promoCode": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.CreatePromocodeRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "discount": {
                    "type": "integer"
                },
                "expiresAt": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.ListPromocodesResponse": {
            "type": "object",
            "properties": {
                "promocodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aroma-hub_internal_models.Promocode"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "aroma-hub_internal_application_dto.Order": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amountToPay": {
                    "type": "integer"
                },
                "contactType": {
                    "$ref": "#/definitions/aroma-hub_internal_models.ContactType"
                },
                "createdAt": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/aroma-hub_internal_models.PaymentMethod"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aroma-hub_internal_application_dto.ProductOrder"
                    }
                },
                "status": {
                    "$ref": "#/definitions/aroma-hub_internal_models.OrderStatus"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_application_dto.OrderResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aroma-hub_internal_application_dto.Order"
                    }
                }
            }
        },
        "aroma-hub_internal_application_dto.ProductOrder": {
            "type": "object",
            "required": [
                "brand",
                "id",
                "name",
                "price",
                "quantity",
                "volume"
            ],
            "properties": {
                "brand": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "volume": {
                    "type": "integer"
                }
            }
        },
        "aroma-hub_internal_application_dto.UpdateOrderRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "paymentMethod": {
                    "$ref": "#/definitions/aroma-hub_internal_models.PaymentMethod"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/aroma-hub_internal_models.OrderStatus"
                }
            }
        },
        "aroma-hub_internal_application_dto.UpdateProductRequest": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "categoryName": {
                    "type": "string"
                },
                "characteristics": {
                    "type": "string"
                },
                "composition": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "hide": {
                    "type": "boolean"
                },
                "imageUrl": {
                    "type": "string"
                },
                "makeVisible": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "setBestSeller": {
                    "type": "boolean"
                },
                "stockAmount": {
                    "type": "integer"
                },
                "unsetBestSeller": {
                    "type": "boolean"
                }
            }
        },
        "aroma-hub_internal_models.Category": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "aroma-hub_internal_models.ContactType": {
            "type": "string",
            "enum": [
                "telegram",
                "phone"
            ],
            "x-enum-varnames": [
                "ContactTypeTelegram",
                "ContactTypePhone"
            ]
        },
        "aroma-hub_internal_models.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "processing",
                "completed",
                "cancelled"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusProcessing",
                "OrderStatusCompleted",
                "OrderStatusCancelled"
            ]
        },
        "aroma-hub_internal_models.PaymentMethod": {
            "type": "string",
            "enum": [
                "IBAN",
                "сash_on_delivery"
            ],
            "x-enum-varnames": [
                "PaymentMethodIBAN",
                "PaymentMethodCashOnDelivery"
            ]
        },
        "aroma-hub_internal_models.Product": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "categoryName": {
                    "type": "string"
                },
                "characteristics": {
                    "type": "string"
                },
                "composition": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "isBestSeller": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "stockAmount": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                }
            }
        },
        "aroma-hub_internal_models.Promocode": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "discount": {
                    "type": "integer"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "errx.Code": {
            "type": "string",
            "enum": [
                "CONFLICT",
                "INTERNAL",
                "NOT_FOUND",
                "BAD_REQUEST",
                "ALREADY_EXISTS",
                "UNAUTHORIZED",
                "FORBIDDEN",
                "TIMEOUT",
                "VALIDATION"
            ],
            "x-enum-comments": {
                "AlreadyExists": "Resource already exists",
                "BadRequest": "Invalid input or parameters",
                "Conflict": "Resource conflicts with existing data",
                "Forbidden": "Permission denied",
                "Internal": "Internal server or system errors",
                "NotFound": "Resource not found",
                "Timeout": "Operation timed out",
                "Unauthorized": "Authentication required",
                "Validation": "Input validation failed"
            },
            "x-enum-varnames": [
                "Conflict",
                "Internal",
                "NotFound",
                "BadRequest",
                "AlreadyExists",
                "Unauthorized",
                "Forbidden",
                "Timeout",
                "Validation"
            ]
        },
        "errx.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error classification code",
                    "allOf": [
                        {
                            "$ref": "#/definitions/errx.Code"
                        }
                    ]
                },
                "err": {
                    "description": "Original error (if any)"
                },
                "message": {
                    "description": "User-friendly error message",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Aroma-Hub API",
	Description:      "dAPI documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
